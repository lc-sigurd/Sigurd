<Project>
    <Import Project="$(MSBuildThisFileDirectory)/MSBuildTasks/MSBuildTasks.targets" Condition="$(MSBuildProjectName) != 'MSBuildTasks'"/>

    <!-- prevent referenced assemblies from being copied to output folders -->
    <Target Name="ClearReferenceCopyLocalPaths" AfterTargets="ResolveAssemblyReferences" Condition="$(ClearCopyLocalPaths) == 'true'">
        <ItemGroup>
            <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"/>
        </ItemGroup>
    </Target>

    <Target Name="SetPluginVersion" AfterTargets="MinVer" DependsOnTargets="MinVer">
        <Message Importance="high" Text="MinVer version is $(MinVerVersion)"/>
        <PropertyGroup>
            <PlainVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)</PlainVersion>
        </PropertyGroup>
    </Target>

    <!-- https://github.com/BepInEx/BepInEx.Templates/blob/9d628c67de0a84337f38f755eeb6646696ae8423/BepInEx.PluginInfoProps/BepInEx.PluginInfoProps.props -->
    <!-- BepInEx.PluginInfoProps Copyright (c) 2021 BepInEx -->
    <Target
        Name="GenerateMyPluginInfo"
        DependsOnTargets="SetPluginVersion"
        BeforeTargets="BeforeCompile;CoreCompile"
        Condition="$(HasBepInPlugin) == 'true'"
        Inputs="$(MSBuildAllProjects)"
        Outputs="$(IntermediateOutputPath)MyPluginInfo.cs"
    >
        <PropertyGroup>
            <GeneratedText><![CDATA[
namespace $(RootNamespace)%3B

#pragma warning disable 1591
internal static class MyPluginInfo
{
    public const string PLUGIN_GUID = "$(AssemblyName)"%3B
    public const string PLUGIN_NAME = "$(Product)"%3B
    public const string PLUGIN_VERSION = "$(PlainVersion)"%3B
}
#pragma warning restore 1591

      ]]></GeneratedText>
            <GeneratedFilePath>$(IntermediateOutputPath)MyPluginInfo.cs</GeneratedFilePath>
        </PropertyGroup>
        <ItemGroup>
            <Compile Include="$(GeneratedFilePath)" />
            <FileWrites Include="$(GeneratedFilePath)" />
        </ItemGroup>
        <WriteLinesToFile Lines="$(GeneratedText)" File="$(GeneratedFilePath)" WriteOnlyWhenDifferent="true" Overwrite="true" />
    </Target>

    <Target
        Name="NetcodePatch"
        AfterTargets="PostBuildEvent"
        Condition="$(RequiresNetcodePatch) == 'true'"
    >
        <Exec Command="dotnet netcode-patch &quot;$(TargetPath)&quot; @(ReferencePathWithRefAssemblies->'&quot;%(Identity)&quot;', ' ')"/>
    </Target>

    <Target
        Name="PatchThunderstoreMetadata"
        DependsOnTargets="SetPluginVersion"
        Condition="$(IsThunderstorePackable) == 'true'"
    >
        <PropertyGroup>
            <_ConfigurationFileOutputPath>$(ProjectDir)assets/thunderstore.toml.user</_ConfigurationFileOutputPath>
        </PropertyGroup>

        <PatchThunderstoreMetadata
            ConfigurationFileOutputPath="$(_ConfigurationFileOutputPath)"
            PackageNamespace="$(ThunderstoreNamespace)"
            PackageName="$(ThunderstoreName)"
            PackageWebsiteUrl="$(ThunderstoreWebsiteUrl)"
            PackageVersion="$(PlainVersion)"
            PackageDescription="$(ThunderstoreDescription)"
            PackageContainsNsfwContent="false"
            PackageDependencies="@(ThunderstoreDependency)"
            BuildReadmePath="$(ThunderstoreReadmePath)"
            BuildIconPath="$(ThunderstoreIconPath)"
            BuildOutDir="$(ThunderstoreOutDir)"
            BuildCopyPaths="@(ThunderstoreBuildCopyPath)"
            PublishCommunities="@(ThunderstorePublishCommunity)"
        />
    </Target>

    <PropertyGroup>
        <ShouldThunderstorePackThisBuild>false</ShouldThunderstorePackThisBuild>
        <ShouldThunderstorePackThisBuild Condition="$(TargetFramework) == 'netstandard2.1' and $(IsThunderstorePackable) == 'true' and $(Configuration) == 'Release'">true</ShouldThunderstorePackThisBuild>
    </PropertyGroup>

    <Target
        Name="ThunderstorePack"
        DependsOnTargets="NetcodePatch;SetPluginVersion;PatchThunderstoreMetadata"
        AfterTargets="PostBuildEvent"
        Condition="$(ShouldThunderstorePackThisBuild)"
    >
        <MakeDir Directories="$(ProjectDir)assets/bundles" Condition="!Exists('$(ProjectDir)assets/bundles')"/>
        <Exec Command="dotnet tcli build --config-path $(ProjectDir)assets/thunderstore.toml.user --package-version $(PlainVersion)"/>
        <ItemGroup>
            <FilesToRename Include="$(ProjectDir)dist/*-$(PlainVersion).zip"/>
        </ItemGroup>
        <Move SourceFiles="@(FilesToRename)" DestinationFiles="@(FilesToRename -&gt; Replace($(PlainVersion), $(MinVerVersion)))"/>
    </Target>

    <Target Name="ThunderstorePublish" DependsOnTargets="SetPluginVersion" Condition="$(IsThunderstorePackable) == 'true'">
        <Exec Command="dotnet tcli publish --config-path $(ProjectDir)assets/thunderstore.toml.user --file $(ProjectDir)dist/*-$(MinVerVersion).zip"/>
    </Target>
</Project>
